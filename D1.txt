#for collab 

from google.colab import files
uploaded = files.upload()


import pandas as pd
# If your uploaded file is named boston.csv
data = pd.read_csv("BostonHousing.csv")
# Preview the dataset
data.head()


# Check basic info
data.info()
# Check for missing values
print(data.isnull().sum())
# Optional: Look at basic statistics
print(data.describe())


X = data.drop('medv', axis=1)
y = data['medv']


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)


from sklearn.linear_model import LinearRegr
ession
from sklearn.metrics import mean_squared_error
import numpy as np
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
y_pred_lr = lr_model.predict(X_test)
rmse_lr = np.sqrt(mean_squared_error(y_test, y_pred_lr))
print("Linear Regression RMSE:", rmse_lr)


from sklearn.impute import SimpleImputer
imputer = SimpleImputer(strategy='mean')  # or 'median'
X = imputer.fit_transform(X)


import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense
model = Sequential()
model.add(Dense(128, activation='relu', input_dim=X_train.shape[1]))
model.add(Dense(64, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(1))  # Output layer
model.compile(optimizer='adam', loss='mean_squared_error')
# Train the model
model.fit(X_train, y_train, epochs=100, verbose=1)
# Predict
y_pred_nn = model.predict(X_test)
# Evaluate
rmse_nn = np.sqrt(mean_squared_error(y_test, y_pred_nn))
print("Neural Network RMSE:", rmse_nn)

