!wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin
!sudo mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600
!sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/3bf863cc.pub
!sudo add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/ /"
!sudo apt-get update
!sudo apt-get -y install cuda-toolkit-12-4


import os
os.environ['PATH'] = '/usr/local/cuda-12.4/bin:' + os.environ['PATH']
os.environ['LD_LIBRARY_PATH'] = '/usr/local/cuda-12.4/lib64:' + os.environ['LD_LIBRARY_PATH']


%%writefile mat_multi.cu
#include <iostream>
#include <cuda.h>
#include <cuda_runtime.h>
#include <stdlib.h>
#include <string.h>

// CUDA kernel for matrix multiplication
__global__ void matmul(int* A, int* B, long long int* C, int N) {
    int Row = blockIdx.y * blockDim.y + threadIdx.y;
    int Col = blockIdx.x * blockDim.x + threadIdx.x;
    if (Row < N && Col < N) {
        long long int Pvalue = 0;
        for (int k = 0; k < N; ++k) {
            Pvalue += (long long int)A[Row * N + k] * B[k * N + Col];
        }
        C[Row * N + Col] = Pvalue;
    }
}

int main() {
    int N = 8;
    int size = N * N * sizeof(int);
    size_t result_size = N * N * sizeof(long long int);

    // Allocate CPU memory
    int* A = (int*)malloc(size);
    int* B = (int*)malloc(size);
    long long int* C = (long long int*)malloc(result_size);

    // Initialize matrices
    int A_data[64] = {
        1, 2, 3, 4, 5, 6, 7, 8,
        9, 10, 11, 12, 13, 14, 15, 16,
        17, 18, 19, 20, 21, 22, 23, 24,
        25, 26, 27, 28, 29, 30, 31, 32,
        33, 34, 35, 36, 37, 38, 39, 40,
        41, 42, 43, 44, 45, 46, 47, 48,
        49, 50, 51, 52, 53, 54, 55, 56,
        57, 58, 59, 60, 61, 62, 63, 64
    };

    int B_data[64] = {
        1, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 1
    };

    memcpy(A, A_data, size);
    memcpy(B, B_data, size);

    std::cout << "Matrix A:\n";
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            std::cout << A[i * N + j] << " ";
        }
        std::cout << "\n";
    }

    std::cout << "\nMatrix B:\n";
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            std::cout << B[i * N + j] << " ";
        }
        std::cout << "\n";
    }

    // Allocate GPU memory
    int *dev_A, *dev_B;
    long long int* dev_C;

    if (cudaMalloc(&dev_A, size) != cudaSuccess ||
        cudaMalloc(&dev_B, size) != cudaSuccess ||
        cudaMalloc(&dev_C, result_size) != cudaSuccess) {
        std::cerr << "CUDA malloc failed!" << std::endl;
        return -1;
    }

    // Copy data to GPU
    cudaMemcpy(dev_A, A, size, cudaMemcpyHostToDevice);
    cudaMemcpy(dev_B, B, size, cudaMemcpyHostToDevice);

    dim3 dimBlock(8, 8);
    dim3 dimGrid((N + dimBlock.x - 1) / dimBlock.x, (N + dimBlock.y - 1) / dimBlock.y);

    // Time the kernel
    cudaEvent_t start, stop;
    cudaEventCreate(&start);
    cudaEventCreate(&stop);
    cudaEventRecord(start);

    matmul<<<dimGrid, dimBlock>>>(dev_A, dev_B, dev_C, N);

    cudaError_t err = cudaGetLastError();
    if (err != cudaSuccess) {
        std::cerr << "CUDA kernel launch error: " << cudaGetErrorString(err) << std::endl;
        return -1;
    }

    cudaDeviceSynchronize();
    cudaEventRecord(stop);
    cudaEventSynchronize(stop);

    float milliseconds = 0;
    cudaEventElapsedTime(&milliseconds, start, stop);

    // Copy result back to host
    cudaMemcpy(C, dev_C, result_size, cudaMemcpyDeviceToHost);

    std::cout << "\nMatrix C (Result):\n";
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            std::cout << C[i * N + j] << " ";
        }
        std::cout << "\n";
    }

    std::cout << "\nMatrix multiplication completed in " << milliseconds << " ms\n";

    std::cout << "\nCPU Verification:\n";
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            long long int value = 0;
            for (int k = 0; k < N; ++k) {
                value += (long long int)A[i * N + k] * B[k * N + j];
            }
            std::cout << value << " ";
        }
        std::cout << "\n";
    }

    // Cleanup
    cudaFree(dev_A);
    cudaFree(dev_B);
    cudaFree(dev_C);
    free(A);
    free(B);
    free(C);
    cudaEventDestroy(start);
    cudaEventDestroy(stop);

    return 0;
}


//!nvcc -arch=sm_75 mat_multi.cu -o mat_multi.out
     
//!./mat_multi.out  

