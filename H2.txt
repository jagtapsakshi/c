
code = r"""
#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

void swap(int *num1, int *num2);

int main(int argc, char *argv[]) {
    int SIZE = 256; // 256 elements
    int A[SIZE];

    for (int i = 0; i < SIZE; i++) {
        A[i] = rand() % SIZE;
    }

    int N = SIZE;
    int i = 0, j = 0;
    int first;
    double start, end;
    start = omp_get_wtime();

    for (i = 0; i < N - 1; i++) {
        first = i % 2;
        #pragma omp parallel for default(none) shared(A, first, N)
        for (j = first; j < N - 1; j += 2) {
            if (A[j] > A[j + 1]) {
                swap(&A[j], &A[j + 1]);
            }
        }
    }

    end = omp_get_wtime();

    for (i = 0; i < N; i++) {
        printf("%d ", A[i]);
    }

    printf("\n-------------------------\n Time Parallel = %f\n", (end - start));

    return 0;
}

void swap(int *num1, int *num2) {
    int temp = *num1;
    *num1 = *num2;
    *num2 = temp;
}
"""

with open("parallel_sort.c", "w") as f:
    f.write(code)


code = r"""
#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

void mergesort(int a[], int i, int j);
void merge(int a[], int i1, int j1, int i2, int j2);

void mergesort(int a[], int i, int j) {
    if (i < j) {
        int mid = (i + j) / 2;

        #pragma omp parallel sections
        {
            #pragma omp section
            {
                mergesort(a, i, mid);
            }

            #pragma omp section
            {
                mergesort(a, mid + 1, j);
            }
        }

        merge(a, i, mid, mid + 1, j);
    }
}

void merge(int a[], int i1, int j1, int i2, int j2) {
    int temp[1000];  // Make sure this is large enough
    int i = i1;
    int j = i2;
    int k = 0;

    while (i <= j1 && j <= j2) {
        if (a[i] < a[j]) {
            temp[k++] = a[i++];
        } else {
            temp[k++] = a[j++];
        }
    }

    while (i <= j1) {
        temp[k++] = a[i++];
    }

    while (j <= j2) {
        temp[k++] = a[j++];
    }

    for (i = i1, j = 0; i <= j2; i++, j++) {
        a[i] = temp[j];
    }
}

int main() {
    int *a, n, i;

    printf("Enter total number of elements: ");
    scanf("%d", &n);

    a = (int *)malloc(n * sizeof(int));
    if (a == NULL) {
        printf("Memory allocation failed.\n");
        return 1;
    }

    printf("Enter elements:\n");
    for (i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    // Start parallel region for mergesort
    #pragma omp parallel
    {
        #pragma omp single
        mergesort(a, 0, n - 1);
    }

    printf("Sorted array is:\n");
    for (i = 0; i < n; i++) {
        printf("%d\n", a[i]);
    }

    free(a);
    return 0;
}
"""

with open("parallel_mergesort.c", "w") as f:
    f.write(code)


//!gcc -fopenmp parallel_mergesort.c -o parallel_mergesort 

//!./parallel_mergesort
